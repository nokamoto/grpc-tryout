// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apis/example/service.proto

package exampleconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	example "github.com/nokamoto/grpc-tryout/pkg/apis/example"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// LibraryName is the fully-qualified name of the Library service.
	LibraryName = "example.Library"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibraryGetShelfProcedure is the fully-qualified name of the Library's GetShelf RPC.
	LibraryGetShelfProcedure = "/example.Library/GetShelf"
)

// LibraryClient is a client for the example.Library service.
type LibraryClient interface {
	GetShelf(context.Context, *connect.Request[example.GetShelfRequest]) (*connect.Response[example.Shelf], error)
}

// NewLibraryClient constructs a client for the example.Library service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibraryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibraryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &libraryClient{
		getShelf: connect.NewClient[example.GetShelfRequest, example.Shelf](
			httpClient,
			baseURL+LibraryGetShelfProcedure,
			opts...,
		),
	}
}

// libraryClient implements LibraryClient.
type libraryClient struct {
	getShelf *connect.Client[example.GetShelfRequest, example.Shelf]
}

// GetShelf calls example.Library.GetShelf.
func (c *libraryClient) GetShelf(ctx context.Context, req *connect.Request[example.GetShelfRequest]) (*connect.Response[example.Shelf], error) {
	return c.getShelf.CallUnary(ctx, req)
}

// LibraryHandler is an implementation of the example.Library service.
type LibraryHandler interface {
	GetShelf(context.Context, *connect.Request[example.GetShelfRequest]) (*connect.Response[example.Shelf], error)
}

// NewLibraryHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibraryHandler(svc LibraryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	libraryGetShelfHandler := connect.NewUnaryHandler(
		LibraryGetShelfProcedure,
		svc.GetShelf,
		opts...,
	)
	return "/example.Library/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibraryGetShelfProcedure:
			libraryGetShelfHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibraryHandler returns CodeUnimplemented from all methods.
type UnimplementedLibraryHandler struct{}

func (UnimplementedLibraryHandler) GetShelf(context.Context, *connect.Request[example.GetShelfRequest]) (*connect.Response[example.Shelf], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.Library.GetShelf is not implemented"))
}
